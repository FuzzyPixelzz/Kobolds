plugins {
    id 'fabric-loom' version '1.10-SNAPSHOT'
    id 'maven-publish'
}

version = mod_version
group = mod_group

repositories {
    mavenLocal()
}

base {
    archivesName = mod_id
}

loom {
    mods {
        "${modid}" {
            sourceSet sourceSets.main
        }
    }
}

dependencies {
    minecraft "com.mojang.minecraft:${minecraft_version}"
    mappings "net.fabricmc:yarn:${yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${loader_version}
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

//neoForge {
  //  runs {
    //    data {
      //      data()
            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        //    programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        //}
    //}
}

// Include resources generated by data generators.
//sourceSets.main.resources { srcDir 'src/generated/resources' }

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
//var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    //var replaceProperties = [minecraft_version      : minecraft_version,
                           //  loader_version  : loader_version,
                           //  mod_id                 : mod_id]
    //inputs.properties replaceProperties
    //expand replaceProperties
    //from "src/main/templates"
    //into "build/generated/sources/modMetadata"
//}

// Include the output of "generateModMetadata" as an input directory for the build
// this works with both building through Gradle and the IDE.
//sourceSets.main.resources.srcDir generateModMetadata
// To avoid having to run "generateModMetadata" manually, make it run on every project reload
//neoForge.ideSyncTask generateModMetadata

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "$projectDir/repo"
        }
    }
}
